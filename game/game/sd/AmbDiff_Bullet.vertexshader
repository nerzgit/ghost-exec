#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;

vec3 EyeDirection_cameraspace;

// BulletHole
uniform mat4 bulletHoleMVP0;
uniform mat4 bulletHoleMVP1;
uniform mat4 bulletHoleMVP2;
uniform mat4 bulletHoleMVP3;
uniform mat4 bulletHoleMVP4;
uniform mat4 bulletHoleMVP5;
uniform mat4 bulletHoleMVP6;
uniform mat4 bulletHoleMVP7;
uniform mat4 bulletHoleMVP8;
uniform mat4 bulletHoleMVP9;
out 	vec3 bulletHoleTextureCoord0;
out 	vec3 bulletHoleTextureCoord1;
out 	vec3 bulletHoleTextureCoord2;
out 	vec3 bulletHoleTextureCoord3;
out 	vec3 bulletHoleTextureCoord4;
out 	vec3 bulletHoleTextureCoord5;
out 	vec3 bulletHoleTextureCoord6;
out 	vec3 bulletHoleTextureCoord7;
out 	vec3 bulletHoleTextureCoord8;
out 	vec3 bulletHoleTextureCoord9;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	// Bullet Hole
	bulletHoleTextureCoord0 = (bulletHoleMVP0 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord1 = (bulletHoleMVP1 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord2 = (bulletHoleMVP2 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord3 = (bulletHoleMVP3 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord4 = (bulletHoleMVP4 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord5 = (bulletHoleMVP5 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord6 = (bulletHoleMVP6 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord7 = (bulletHoleMVP7 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord8 = (bulletHoleMVP8 * vec4(vertexPosition_modelspace,1)).xyz;
	bulletHoleTextureCoord9 = (bulletHoleMVP9 * vec4(vertexPosition_modelspace,1)).xyz;
}

